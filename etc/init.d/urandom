#!/sbin/openrc-run

description="Saves and restores the kernel's random seed"
random_seed_file="/var/lib/urandom/random-seed"

depend() {
	# Need local filesystems to read/write the seed file
	need localmount
}

# This function calculates the size of the kernel's entropy pool in bytes.
_get_pool_bytes() {
	local poolsize
	poolsize=$(cat /proc/sys/kernel/random/poolsize 2>/dev/null)
	if [ -n "${poolsize}" ]; then
		echo $(( (poolsize + 7) / 8 ))
	else
		# Fallback to a safe default if /proc is unavailable
		echo 512
	fi
}

# This function loads the seed file and immediately saves a new one.
_load_and_refresh_seed() {
	local pool_bytes=$(_get_pool_bytes)

	# Seed the RNG with the current time and the saved seed file.
	# This subshell ensures all output is piped to urandom at once.
	(
		date +%s.%N
		[ -f "${random_seed_file}" ] && cat "${random_seed_file}"
	) > /dev/urandom

	# Immediately save a new seed to prevent reuse.
	# This is a critical security measure.
	umask 077
	dd if=/dev/urandom of="${random_seed_file}" bs="${pool_bytes}" count=1 >/dev/null 2>&1
	eend $?
}

start() {
	[ -c /dev/urandom ] || return 0

	ebegin "Initializing random number generator"
	mkdir -p "$(dirname "${random_seed_file}")"
	_load_and_refresh_seed
}

stop() {
	[ -c /dev/urandom ] || return 0

	ebegin "Saving random seed"
	# Save a new seed on shutdown to carry entropy over to the next boot.
	local pool_bytes=$(_get_pool_bytes)
	umask 077
	dd if=/dev/urandom of="${random_seed_file}" bs="${pool_bytes}" count=1 >/dev/null 2>&1
	eend $?
}